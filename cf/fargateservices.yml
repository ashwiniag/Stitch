#tg,sg,ecs
AWSTemplateFormatVersion: 2010-09-09
Description:  services running in fargate.
Parameters:
  serviceName:
    Type: String
    Default: Stitch
  servicePort:
    Type: Number
    Default: 4848
  ImageURI:
    Type: String
    Default: 575551386784.dkr.ecr.ap-south-1.amazonaws.com/hellostitch:latest

Resources:
  #Create Targate group for respective service
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', [!Ref "AWS::StackName",!Ref serviceName, 'TG']]
      Port: 4848
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue VPC-ID
      HealthCheckIntervalSeconds: 30 #default
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
  # Create a LoadBalancerListener and attach the TargetGroup and LoadBalancer
  ALBListenerHTTPSRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '/'
      Priority: 1
      ListenerArn: !ImportValue ALB-HTTPS

  #Create SG for respective fargate service containers
  PrivateECS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  !Join ['-', [!Ref "AWS::StackName", !Ref serviceName, 'private']]
      VpcId: !ImportValue VPC-ID
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !ImportValue Public-ALB-SG-ID
      Tags:
        - Key: Name
          Value:  !Join ['-', [!Ref "AWS::StackName", "ECS" ]]
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref "AWS::StackName",!Ref serviceName]]
  # Create Access Role for ECS-Tasks
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:  !Join ['-', [!Ref "AWS::StackName",!Ref serviceName, 'ExecutionRole']]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # Create a TaskDefinition with container details
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: !Ref ExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name:  !Join ['-', [!Ref "AWS::StackName",!Ref serviceName, 'Container']]
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: !Ref servicePort
              HostPort: !Ref servicePort
  # Create an ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListenerHTTPSRule
    Properties:
      ServiceName:  !Join ['-', [!Ref "AWS::StackName",!Ref serviceName, 'ECSService']]
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !ImportValue PrivateSubnetA
            - !ImportValue PrivateSubnetB
          SecurityGroups:
            - !Ref PrivateECS
      LoadBalancers:
        - ContainerName: !Join ['-', [!Ref "AWS::StackName",!Ref serviceName, 'Container']]
          ContainerPort: !Ref servicePort
          TargetGroupArn: !Ref TargetGroup

Outputs:
  PrivateECS:
    Description: A reference to the security group for private containers
    Value: !Ref PrivateECS
    Export:
      Name: Private-ECS-SG-ID
  TargetGroup:
    Description: A reference to the Target group for private containers
    Value: !Ref TargetGroup
    Export:
      Name: TG-ID